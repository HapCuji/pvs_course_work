1 TODO

. ok error code
. ok state in send mess
. ok controll client data
. ok counter error command

. ok double linked list
. ok read while recv or strlen(body + buf) < MAX_SMTP_MESSAGE
. ok check run server
. ok test memory
. ok test connect
. ok test big data



.mb сделать перенос (если команда не в начале сообщения лишнюю часть выкинуть и перекопировать буфер в начало (не уверен что так делают, но мне нравится))
.do проверить что повторный ввод команды работает корректно (все выделения не падают)

.cdo разбить независимый функционал по файлам
.cdo test client 


2 Question

1. what doing with windows and linux crlf and lf
2. i must receive message (with /r/n only? )
    - continiusly saved last buffer?
    - or can clear (how i doing except TEXT in DATA )




3 NoteBene

save here
.check whereever using malloc realloc alloc <=> must be free() 
=> all data that have pointer must be free before we free the it pointer (in other case we lost it data and can't free )
    => but when we alloc memory for pointer that content static parameter, memory allocate for all it data already..
        i.e. for example:
        /<../ 
        struct anytype {
            int i;
            char buf[500];
            new_type p_new;
        } * p_struct;

        p_struct = malloc(sizeof(*p_struct));                   // allocate memory for "i", "buf", but not allocate for "p_new"
        free(p_struct);                                         // all good
        /..>/ 
        after if we allocate p_new, and then must free (p_new) before (p_struct)
        /<../ 
        p_struct = malloc(sizeof(*p_struct));                   // allocate memory for "i", "buf", but not allocate for "p_new"
        p_struct->p_new = malloc(sizeof(*p_struct->p_new));     // allocate for "p_new"
        free(p_struct->p_new);                                  // only so
        free(p_struct);
        /..>/ 

        <!!>
        Use free() to deallocate memory that has been previously allocated by malloc() or one of its variants. 
        Always remember where the memory came from – stack or heap 
        <!!>
